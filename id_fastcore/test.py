# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_test.ipynb.

# %% auto 0
__all__ = ['test_fail', 'test']

# %% ../nbs/01_test.ipynb 1
from .imports import *
from collections import Counter
from contextlib import redirect_stdout

# %% ../nbs/01_test.ipynb 7
def test_fail(f, msg='', contains='', args=None, kwargs=None):
    "Fails with `msg` unless `f()` raises an exception and (optionally) has `contains` in `e.args`"
    args, kwargs = args or [], kwargs or {}
    try: f(*args, **kwargs)
    except Exception as e:
        # not contains is used to pass assertion of contains is None
        assert not contains or contains in str(e)
        return
    # reach that part only if no exception raised
    assert False, f"Expected exception but none raised. {msg}"

# %% ../nbs/01_test.ipynb 12
def test(a, b, cmp, cname=None):
    "`assert` that `cmp(a,b)`; display inputs and `cname or cmp.__name__` if it fails"
    if cname is None: cname = cmp.__name__
    assert cmp(a,b), f"{cname}:\n{a}\n{b}"
